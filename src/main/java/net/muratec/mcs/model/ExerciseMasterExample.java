package net.muratec.mcs.model;

import java.util.ArrayList;
import java.util.List;

public class ExerciseMasterExample {

    /**
     * This field was generated by MyBatis Generator. This field corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    protected String orderByClause;
    /**
     * This field was generated by MyBatis Generator. This field corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    protected boolean distinct;
    /**
     * This field was generated by MyBatis Generator. This field corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    public ExerciseMasterExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {

        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    public String getOrderByClause() {

        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {

        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    public boolean isDistinct() {

        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {

        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    public void or(Criteria criteria) {

        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    public Criteria or() {

        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    public Criteria createCriteria() {

        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {

        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    public void clear() {

        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {

        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {

            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {

            return criteria;
        }

        public List<Criterion> getCriteria() {

            return criteria;
        }

        protected void addCriterion(String condition) {

            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {

            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {

            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andPatternIdIsNull() {

            addCriterion("PATTERN_ID is null");
            return (Criteria) this;
        }

        public Criteria andPatternIdIsNotNull() {

            addCriterion("PATTERN_ID is not null");
            return (Criteria) this;
        }

        public Criteria andPatternIdEqualTo(String value) {

            addCriterion("PATTERN_ID =", value, "patternId");
            return (Criteria) this;
        }

        public Criteria andPatternIdNotEqualTo(String value) {

            addCriterion("PATTERN_ID <>", value, "patternId");
            return (Criteria) this;
        }

        public Criteria andPatternIdGreaterThan(String value) {

            addCriterion("PATTERN_ID >", value, "patternId");
            return (Criteria) this;
        }

        public Criteria andPatternIdGreaterThanOrEqualTo(String value) {

            addCriterion("PATTERN_ID >=", value, "patternId");
            return (Criteria) this;
        }

        public Criteria andPatternIdLessThan(String value) {

            addCriterion("PATTERN_ID <", value, "patternId");
            return (Criteria) this;
        }

        public Criteria andPatternIdLessThanOrEqualTo(String value) {

            addCriterion("PATTERN_ID <=", value, "patternId");
            return (Criteria) this;
        }

        public Criteria andPatternIdLike(String value) {

            addCriterion("PATTERN_ID like", value, "patternId");
            return (Criteria) this;
        }

        public Criteria andPatternIdNotLike(String value) {

            addCriterion("PATTERN_ID not like", value, "patternId");
            return (Criteria) this;
        }

        public Criteria andPatternIdIn(List<String> values) {

            addCriterion("PATTERN_ID in", values, "patternId");
            return (Criteria) this;
        }

        public Criteria andPatternIdNotIn(List<String> values) {

            addCriterion("PATTERN_ID not in", values, "patternId");
            return (Criteria) this;
        }

        public Criteria andPatternIdBetween(String value1, String value2) {

            addCriterion("PATTERN_ID between", value1, value2, "patternId");
            return (Criteria) this;
        }

        public Criteria andPatternIdNotBetween(String value1, String value2) {

            addCriterion("PATTERN_ID not between", value1, value2, "patternId");
            return (Criteria) this;
        }

        public Criteria andOwnerIsNull() {

            addCriterion("OWNER is null");
            return (Criteria) this;
        }

        public Criteria andOwnerIsNotNull() {

            addCriterion("OWNER is not null");
            return (Criteria) this;
        }

        public Criteria andOwnerEqualTo(String value) {

            addCriterion("OWNER =", value, "owner");
            return (Criteria) this;
        }

        public Criteria andOwnerNotEqualTo(String value) {

            addCriterion("OWNER <>", value, "owner");
            return (Criteria) this;
        }

        public Criteria andOwnerGreaterThan(String value) {

            addCriterion("OWNER >", value, "owner");
            return (Criteria) this;
        }

        public Criteria andOwnerGreaterThanOrEqualTo(String value) {

            addCriterion("OWNER >=", value, "owner");
            return (Criteria) this;
        }

        public Criteria andOwnerLessThan(String value) {

            addCriterion("OWNER <", value, "owner");
            return (Criteria) this;
        }

        public Criteria andOwnerLessThanOrEqualTo(String value) {

            addCriterion("OWNER <=", value, "owner");
            return (Criteria) this;
        }

        public Criteria andOwnerLike(String value) {

            addCriterion("OWNER like", value, "owner");
            return (Criteria) this;
        }

        public Criteria andOwnerNotLike(String value) {

            addCriterion("OWNER not like", value, "owner");
            return (Criteria) this;
        }

        public Criteria andOwnerIn(List<String> values) {

            addCriterion("OWNER in", values, "owner");
            return (Criteria) this;
        }

        public Criteria andOwnerNotIn(List<String> values) {

            addCriterion("OWNER not in", values, "owner");
            return (Criteria) this;
        }

        public Criteria andOwnerBetween(String value1, String value2) {

            addCriterion("OWNER between", value1, value2, "owner");
            return (Criteria) this;
        }

        public Criteria andOwnerNotBetween(String value1, String value2) {

            addCriterion("OWNER not between", value1, value2, "owner");
            return (Criteria) this;
        }

        public Criteria andOrgPriorityIsNull() {

            addCriterion("ORG_PRIORITY is null");
            return (Criteria) this;
        }

        public Criteria andOrgPriorityIsNotNull() {

            addCriterion("ORG_PRIORITY is not null");
            return (Criteria) this;
        }

        public Criteria andOrgPriorityEqualTo(Short value) {

            addCriterion("ORG_PRIORITY =", value, "orgPriority");
            return (Criteria) this;
        }

        public Criteria andOrgPriorityNotEqualTo(Short value) {

            addCriterion("ORG_PRIORITY <>", value, "orgPriority");
            return (Criteria) this;
        }

        public Criteria andOrgPriorityGreaterThan(Short value) {

            addCriterion("ORG_PRIORITY >", value, "orgPriority");
            return (Criteria) this;
        }

        public Criteria andOrgPriorityGreaterThanOrEqualTo(Short value) {

            addCriterion("ORG_PRIORITY >=", value, "orgPriority");
            return (Criteria) this;
        }

        public Criteria andOrgPriorityLessThan(Short value) {

            addCriterion("ORG_PRIORITY <", value, "orgPriority");
            return (Criteria) this;
        }

        public Criteria andOrgPriorityLessThanOrEqualTo(Short value) {

            addCriterion("ORG_PRIORITY <=", value, "orgPriority");
            return (Criteria) this;
        }

        public Criteria andOrgPriorityIn(List<Short> values) {

            addCriterion("ORG_PRIORITY in", values, "orgPriority");
            return (Criteria) this;
        }

        public Criteria andOrgPriorityNotIn(List<Short> values) {

            addCriterion("ORG_PRIORITY not in", values, "orgPriority");
            return (Criteria) this;
        }

        public Criteria andOrgPriorityBetween(Short value1, Short value2) {

            addCriterion("ORG_PRIORITY between", value1, value2, "orgPriority");
            return (Criteria) this;
        }

        public Criteria andOrgPriorityNotBetween(Short value1, Short value2) {

            addCriterion("ORG_PRIORITY not between", value1, value2, "orgPriority");
            return (Criteria) this;
        }

        public Criteria andMaxTransCountIsNull() {

            addCriterion("MAX_TRANS_COUNT is null");
            return (Criteria) this;
        }

        public Criteria andMaxTransCountIsNotNull() {

            addCriterion("MAX_TRANS_COUNT is not null");
            return (Criteria) this;
        }

        public Criteria andMaxTransCountEqualTo(Short value) {

            addCriterion("MAX_TRANS_COUNT =", value, "maxTransCount");
            return (Criteria) this;
        }

        public Criteria andMaxTransCountNotEqualTo(Short value) {

            addCriterion("MAX_TRANS_COUNT <>", value, "maxTransCount");
            return (Criteria) this;
        }

        public Criteria andMaxTransCountGreaterThan(Short value) {

            addCriterion("MAX_TRANS_COUNT >", value, "maxTransCount");
            return (Criteria) this;
        }

        public Criteria andMaxTransCountGreaterThanOrEqualTo(Short value) {

            addCriterion("MAX_TRANS_COUNT >=", value, "maxTransCount");
            return (Criteria) this;
        }

        public Criteria andMaxTransCountLessThan(Short value) {

            addCriterion("MAX_TRANS_COUNT <", value, "maxTransCount");
            return (Criteria) this;
        }

        public Criteria andMaxTransCountLessThanOrEqualTo(Short value) {

            addCriterion("MAX_TRANS_COUNT <=", value, "maxTransCount");
            return (Criteria) this;
        }

        public Criteria andMaxTransCountIn(List<Short> values) {

            addCriterion("MAX_TRANS_COUNT in", values, "maxTransCount");
            return (Criteria) this;
        }

        public Criteria andMaxTransCountNotIn(List<Short> values) {

            addCriterion("MAX_TRANS_COUNT not in", values, "maxTransCount");
            return (Criteria) this;
        }

        public Criteria andMaxTransCountBetween(Short value1, Short value2) {

            addCriterion("MAX_TRANS_COUNT between", value1, value2, "maxTransCount");
            return (Criteria) this;
        }

        public Criteria andMaxTransCountNotBetween(Short value1, Short value2) {

            addCriterion("MAX_TRANS_COUNT not between", value1, value2, "maxTransCount");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to the database table EXERCISE_MASTER
     * @mbg.generated
     */
    public static class Criterion {

        private String condition;
        private Object value;
        private Object secondValue;
        private boolean noValue;
        private boolean singleValue;
        private boolean betweenValue;
        private boolean listValue;
        private String typeHandler;

        public String getCondition() {

            return condition;
        }

        public Object getValue() {

            return value;
        }

        public Object getSecondValue() {

            return secondValue;
        }

        public boolean isNoValue() {

            return noValue;
        }

        public boolean isSingleValue() {

            return singleValue;
        }

        public boolean isBetweenValue() {

            return betweenValue;
        }

        public boolean isListValue() {

            return listValue;
        }

        public String getTypeHandler() {

            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to the database table
     * EXERCISE_MASTER
     *
     * @mbggenerated do_not_delete_during_merge Mon Nov 14 10:45:44 JST 2016
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }
}
